package com.pastebin.controller;

import com.pastebin.dto.FileStatusResponse;
import com.pastebin.dto.OtherInfoDto;
import com.pastebin.dto.UploadFileResponse;
import com.pastebin.handler.FileStorageHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

/**
 */
@RestController
@RequestMapping("/paste/back/file")
public class FileController {

    private static final Logger LOG = LoggerFactory.getLogger(FileController.class);

    private final FileStorageHandler fileStorageHandler;

    @Autowired
    public FileController(FileStorageHandler fileStorageHandler) {
        this.fileStorageHandler = fileStorageHandler;
    }

    /*
    API for uploading of file, It takes multipart file and a docID. File get uploaded on a particular directory.
    In response, It will return a uri containing a threadRefId. Hitting it will return the docId if uploaded successfully or WIP or exception.
     */
    @RequestMapping(value = "/uploadFile", method = RequestMethod.POST)
    public ResponseEntity<?> uploadFile(@RequestParam("file") MultipartFile file, @RequestParam("docID") final String docID) {
        LOG.info(String.format("Request received for upload file with file name %s for docId", file.getOriginalFilename(), docID));
        String referenceId = fileStorageHandler.upload(file, docID);
        String fileStatusUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("/checkStatus/")
                .path(referenceId)
                .toUriString();
        FileStatusResponse statusResponse = new FileStatusResponse(referenceId, fileStatusUri,
                "application/octet-stream", "Request has been accepted.");
        return ResponseEntity.status(HttpStatus.CREATED).body(statusResponse);
    }



    // TODO: make api for pasteit/api/text  post
    // Description : It takes text, url, title of the page and will insert it into DB.
    // Response    : It will return a uri containing a threadRefId. Hitting it will return the docId if inserted successfully or WIP or exception.
    /*
    API for uploading of file, It takes multipart file and a docID. File get uploaded on a particular directory.
    In response, It will return a uri containing a threadRefId. Hitting it will return the docId if uploaded successfully or WIP or exception.
     */
    @RequestMapping(value = "/uploadOtherInfo", method = RequestMethod.POST)
    public ResponseEntity<?> uploadTextUrlTitle(@RequestBody OtherInfoDto infoDto, @RequestParam("docID") final String docID) {
        LOG.info(String.format("Request received for uploading of text url and title for docId %s", docID));
        String referenceId = fileStorageHandler.upload(file, docID);
        String fileStatusUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("/checkStatus/")
                .path(referenceId)
                .toUriString();
        FileStatusResponse statusResponse = new FileStatusResponse(referenceId, fileStatusUri,
                "application/octet-stream", "Request has been accepted.");
        return ResponseEntity.status(HttpStatus.CREATED).body(statusResponse);
    }

    /*
    API for checking the status of particular request.
     */
    @RequestMapping(value = "/checkStatus/{referenceId}", method = RequestMethod.GET)
    public ResponseEntity<?> checkStatus(@PathVariable String referenceId) {
        LOG.info(String.format("Request received for check status for referenceId %s", referenceId));
        UploadFileResponse uploadFileResponse = fileStorageHandler.getUploadResponse(referenceId);
        return ResponseEntity.status(HttpStatus.OK).body(uploadFileResponse);
    }



    // TODO : make API for pasteit/api/tag   post
    // Description : It takes tag/tags and docIds to tag the docIds. DocIds will be generated by above 2 APIs
    // Response    : It will return a unique tiny url which can be shared and also will be used to access the uploaded details.
}
